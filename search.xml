<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA OS Lab2实验报告</title>
      <link href="/2023/04/04/Lab2/"/>
      <url>/2023/04/04/Lab2/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab2-实验报告"><a href="#Lab2-实验报告" class="headerlink" title="Lab2 实验报告"></a>Lab2 实验报告</h1><p>关键词：物理内存的管理方法（链表法），虚拟内存的管理方法（两级页表法），TLB清除与重填</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><h5 id="2-1-请根据上述说明，回答问题：在编写的-C-程序中，指针变量中存储的地址是虚拟地址，还是物理地址？MIPS-汇编程序中-lw-和-sw-使用的是虚拟地址，还是物理地址？"><a href="#2-1-请根据上述说明，回答问题：在编写的-C-程序中，指针变量中存储的地址是虚拟地址，还是物理地址？MIPS-汇编程序中-lw-和-sw-使用的是虚拟地址，还是物理地址？" class="headerlink" title="2.1 请根据上述说明，回答问题：在编写的 C 程序中，指针变量中存储的地址是虚拟地址，还是物理地址？MIPS 汇编程序中 lw 和 sw 使用的是虚拟地址，还是物理地址？"></a>2.1 请根据上述说明，回答问题：在编写的 C 程序中，指针变量中存储的地址是虚拟地址，还是物理地址？MIPS 汇编程序中 lw 和 sw 使用的是虚拟地址，还是物理地址？</h5><p>均为虚拟地址</p><h5 id="2-2-请思考下述两个问题：①-从可重用性的角度，阐述用宏来实现链表的好处。②查看实验环境中的-usr-include-sys-queue-h，了解其中单向链表与循环链表的实现，比较它们与本实验中使用的双向链表，分析三者在插入与删除操作上的性能差异。"><a href="#2-2-请思考下述两个问题：①-从可重用性的角度，阐述用宏来实现链表的好处。②查看实验环境中的-usr-include-sys-queue-h，了解其中单向链表与循环链表的实现，比较它们与本实验中使用的双向链表，分析三者在插入与删除操作上的性能差异。" class="headerlink" title="2.2 请思考下述两个问题：① 从可重用性的角度，阐述用宏来实现链表的好处。②查看实验环境中的 /usr/include/sys/queue.h，了解其中单向链表与循环链表的实现，比较它们与本实验中使用的双向链表，分析三者在插入与删除操作上的性能差异。"></a>2.2 请思考下述两个问题：① 从可重用性的角度，阐述用宏来实现链表的好处。②查看实验环境中的 /usr/include/sys/queue.h，了解其中单向链表与循环链表的实现，比较它们与本实验中使用的双向链表，分析三者在插入与删除操作上的性能差异。</h5><p>① 实现了C语言不支持的泛型。宏函数参数type的使用实现自定义数据类型的链表，通过各种宏定义实现链表的基本操作。</p><blockquote><p>C++ 中可以使用 std::stack<T> 定义一个类型为 T 的栈，Java 中可以使用 HashMap<K,V></p><p>定义一个键类型为 K 且值类型为 V 的哈希表。这种模式称为泛型，C 语言并没有泛型的语法，因</p><p>此需要通过宏另辟蹊径来实现泛型。</p></blockquote><p>② </p><div class="table-container"><table><thead><tr><th></th><th>插入操作</th><th>删除操作</th></tr></thead><tbody><tr><td>单向链表</td><td>头部插入O(1), 尾部插入O(n)，指定节点前O(n)，指定节点后O(1)</td><td>头部删除O(1)，指定节点O(n)</td></tr><tr><td>循环链表</td><td>头部插入O(1), 尾部插入O(1)，指定节点前O(1)，指定节点后O(1)</td><td>头部删除O(1)，指定节点O(1)</td></tr><tr><td>双向链表</td><td>头部插入O(1), 尾部插入O(n)，指定节点前O(1)，指定节点后O(1)</td><td>头部删除O(1)，指定节点O(1)</td></tr></tbody></table></div><p>空间性能：单向链表&lt;双向链表&lt;循环链表</p><p>时间性能：循环链表&lt;双向链表&lt;单向链表</p><h5 id="2-3-Page-list-的展开结构"><a href="#2-3-Page-list-的展开结构" class="headerlink" title="2.3 Page_list 的展开结构"></a>2.3 Page_list 的展开结构</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page_list</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">le_next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> **<span class="title">le_prev</span>;</span></span><br><span class="line">&#125; pp_link; <span class="comment">// 对应的链表项</span></span><br><span class="line">u_short pp_ref; <span class="comment">// 这一页物理内存被引用的次数，等于有多少虚拟页映射到该物理页</span></span><br><span class="line">&#125;* lh_first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-请思考下面两个问题：①-请阅读上面有关-R3000-TLB-的描述，从虚拟内存的实现角度，阐述-ASID-的必要性。②-请阅读《IDT-R30xx-Family-Software-Reference-Manual》的-Chapter-6，结合-ASID段的位数，说明-R3000-中可容纳不同的地址空间的最大数量。"><a href="#2-4-请思考下面两个问题：①-请阅读上面有关-R3000-TLB-的描述，从虚拟内存的实现角度，阐述-ASID-的必要性。②-请阅读《IDT-R30xx-Family-Software-Reference-Manual》的-Chapter-6，结合-ASID段的位数，说明-R3000-中可容纳不同的地址空间的最大数量。" class="headerlink" title="2.4 请思考下面两个问题：① 请阅读上面有关 R3000-TLB 的描述，从虚拟内存的实现角度，阐述 ASID 的必要性。② 请阅读《IDT R30xx Family Software Reference Manual》的 Chapter 6，结合 ASID段的位数，说明 R3000 中可容纳不同的地址空间的最大数量。"></a>2.4 请思考下面两个问题：① 请阅读上面有关 R3000-TLB 的描述，从虚拟内存的实现角度，阐述 ASID 的必要性。② 请阅读《IDT R30xx Family Software Reference Manual》的 Chapter 6，结合 ASID段的位数，说明 R3000 中可容纳不同的地址空间的最大数量。</h5><p>① ASID 用于区分不同的地址空间，因为同一虚拟地址在不同的地址空间中通常映射到不同的物理地址。ASID能在多进程操作系统中访存更加安全。</p><p>② ASID 长度为6位，可以容纳不同地址空间的最大数量即为64。每个进程对应唯一的 ASID，则处理器可支持64个并发进程。</p><h5 id="请回答下述三个问题：①-tlb-invalidate-和-tlb-out-的调用关系？②-请用一句话概括-tlb-invalidate-的作用。③-逐行解释-tlb-out-中的汇编代码。"><a href="#请回答下述三个问题：①-tlb-invalidate-和-tlb-out-的调用关系？②-请用一句话概括-tlb-invalidate-的作用。③-逐行解释-tlb-out-中的汇编代码。" class="headerlink" title="请回答下述三个问题：① tlb_invalidate 和 tlb_out 的调用关系？② 请用一句话概括 tlb_invalidate 的作用。③ 逐行解释 tlb_out 中的汇编代码。"></a>请回答下述三个问题：① tlb_invalidate 和 tlb_out 的调用关系？② 请用一句话概括 tlb_invalidate 的作用。③ 逐行解释 tlb_out 中的汇编代码。</h5><p>tlb_invalidate 调用 tlb_out，实现删除特定虚拟地址在 TLB 中的旧表项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">LEAF(tlb_out)</span><br><span class="line">.set noreorder</span><br><span class="line">mfc0    t0, CP0_ENTRYHI // t0 = CP0_ENTRYHI</span><br><span class="line">mtc0    a0, CP0_ENTRYHI // CP0_ENTRYHI = a0</span><br><span class="line">nop // 解决数据冒险(tlbq)</span><br><span class="line">/* Step 1: Use &#x27;tlbp&#x27; to probe TLB entry */</span><br><span class="line">/* Exercise 2.8: Your code here. (1/2) */</span><br><span class="line">tlbp // 根据 ENTRYHI 中的 key 查找对应的旧表项，将表项的索引存入 Index</span><br><span class="line">nop // 解决数据冒险(tlbq)</span><br><span class="line">/* Step 2: Fetch the probe result from CP0.Index */</span><br><span class="line">mfc0    t1, CP0_INDEX // t1 = CP0_INDEX</span><br><span class="line">.set reorder</span><br><span class="line">bltz    t1, NO_SUCH_ENTRY // 若索引值&gt;=0（即TLB中存在 key 对应的表项），则向 ENTRYHI 和 ENTRYLO中写入0</span><br><span class="line">.set noreorder</span><br><span class="line">mtc0    zero, CP0_ENTRYHI</span><br><span class="line">mtc0    zero, CP0_ENTRYLO0</span><br><span class="line">nop</span><br><span class="line">/* Step 3: Use &#x27;tlbwi&#x27; to write CP0.EntryHi/Lo into TLB at CP0.Index  */</span><br><span class="line">/* Exercise 2.8: Your code here. (2/2) */</span><br><span class="line">tlbwi // 将 ENTRYHI, EHTRYLO 中的值写入索引指定的表项</span><br><span class="line">.set reorder</span><br><span class="line"></span><br><span class="line">NO_SUCH_ENTRY:</span><br><span class="line">mtc0    t0, CP0_ENTRYHI // CPO_ENTRYHI = t0 恢复为原始值，以便后续指令能正确访问虚拟地址</span><br><span class="line">j       ra</span><br><span class="line">END(tlb_out)</span><br></pre></td></tr></table></figure><h5 id="2-5-在现代的-64-位系统中，提供了-64-位的字长，但实际上不是-64-位页式存储系统。假设在-64-位系统中采用三级页表机制，页面大小-4KB。由于-64-位系统中字长为8B，且页目录也占用一页，因此页目录中有-512-个页目录项，因此每级页表都需要-9-位。因此在-64-位系统下，总共需要-3-×-9-12-39-位就可以实现三级页表机制，并不需要-64位。现考虑上述-39-位的三级页式存储系统，虚拟地址空间为-512-GB，若三级页表的基地址为-PTbase，请计算：三级页表页目录的基地址。映射到页目录自身的页目录项（自映射）。"><a href="#2-5-在现代的-64-位系统中，提供了-64-位的字长，但实际上不是-64-位页式存储系统。假设在-64-位系统中采用三级页表机制，页面大小-4KB。由于-64-位系统中字长为8B，且页目录也占用一页，因此页目录中有-512-个页目录项，因此每级页表都需要-9-位。因此在-64-位系统下，总共需要-3-×-9-12-39-位就可以实现三级页表机制，并不需要-64位。现考虑上述-39-位的三级页式存储系统，虚拟地址空间为-512-GB，若三级页表的基地址为-PTbase，请计算：三级页表页目录的基地址。映射到页目录自身的页目录项（自映射）。" class="headerlink" title="2.5 在现代的 64 位系统中，提供了 64 位的字长，但实际上不是 64 位页式存储系统。假设在 64 位系统中采用三级页表机制，页面大小 4KB。由于 64 位系统中字长为8B，且页目录也占用一页，因此页目录中有 512 个页目录项，因此每级页表都需要 9 位。因此在 64 位系统下，总共需要 3 × 9 + 12 = 39 位就可以实现三级页表机制，并不需要 64位。现考虑上述 39 位的三级页式存储系统，虚拟地址空间为 512 GB，若三级页表的基地址为 PTbase，请计算：三级页表页目录的基地址。映射到页目录自身的页目录项（自映射）。"></a>2.5 在现代的 64 位系统中，提供了 64 位的字长，但实际上不是 64 位页式存储系统。假设在 64 位系统中采用三级页表机制，页面大小 4KB。由于 64 位系统中字长为8B，且页目录也占用一页，因此页目录中有 512 个页目录项，因此每级页表都需要 9 位。因此在 64 位系统下，总共需要 3 <em>×</em> 9 + 12 = 39 位就可以实现三级页表机制，并不需要 64位。现考虑上述 39 位的三级页式存储系统，虚拟地址空间为 512 GB，若三级页表的基地址为 PTbase，请计算：三级页表页目录的基地址。映射到页目录自身的页目录项（自映射）。</h5><p>三级页表的基地址为PTbase（即虚拟内存第一个页表项的地址），其所在页为 PTbase &gt;&gt; 12。第二级页表的基地址 PTbase + PTbase &gt;&gt; 12 &lt;&lt; 3 = PTbase + PTbase &gt;&gt; 9。那么一级页表的基地址为 PTbase + PTbase &gt;&gt; 9 + PTbase &gt;&gt; 18。</p><p>映射到页目录自身的页目录项即为 PDEbase = PTbase + PTbase &gt;&gt; 9 + PTbase &gt;&gt; 18 + PTbase &gt;&gt; 27。</p><h5 id="2-6-①-简单了解并叙述-X86-体系结构中的内存管理机制，比较-X86-和-MIPS-在内存管理上的区别。②-简单了解并叙述-RISC-V-中的内存管理机制，比较-RISC-V-与-MIPS-在内存管理上的区别。"><a href="#2-6-①-简单了解并叙述-X86-体系结构中的内存管理机制，比较-X86-和-MIPS-在内存管理上的区别。②-简单了解并叙述-RISC-V-中的内存管理机制，比较-RISC-V-与-MIPS-在内存管理上的区别。" class="headerlink" title="2.6 ① 简单了解并叙述 X86 体系结构中的内存管理机制，比较 X86 和 MIPS 在内存管理上的区别。② 简单了解并叙述 RISC-V 中的内存管理机制，比较 RISC-V 与 MIPS 在内存管理上的区别。"></a>2.6 ① 简单了解并叙述 X86 体系结构中的内存管理机制，比较 X86 和 MIPS 在内存管理上的区别。② 简单了解并叙述 RISC-V 中的内存管理机制，比较 RISC-V 与 MIPS 在内存管理上的区别。</h5><p>① x86主要为为段页式内存管理机制，更有利于内存保护和共享。而MIPS作为一种精简的指令集体系结构，主要采用分页式内存管理机制和单一地址空间模型，即将内存地址空间分为用户空间和内核空间。</p><h3 id="函数定义分析"><a href="#函数定义分析" class="headerlink" title="函数定义分析"></a>函数定义分析</h3><ul><li><code>mips_detect_memory()</code>: kern/pmap.c，探测硬件可用内存，并对一些和内存管理相关的变量进行初始化</li><li><code>mips_vm_init()</code>：kern/pmap.c，在探测完可用内存后，将开始建立内存管理机制。<ul><li><code>alloc</code>：kern/pmap.c，分配内存空间（在建立页式内存管理机制之前使用）。分配 n 字节的空间并返回初始的虚拟地址，同时将地址按 align 字节对齐（保证 align 可以整除初始虚拟地址），若 clear 为真，则将对应内存空间的值清零，否则不清零。</li></ul></li><li><code>page_init()</code></li><li><code>ROUND(a,n)</code> :一个定义在 include/types.h 的宏，作用是返回 ⌈a\n⌉ n（将 a 按 n 向上对齐），要求 n 必须是 2 的非负整数次幂。</li><li><code>ROUNDDOWN(a, n)</code> : 下取整</li><li><code>PPN(va)</code> ：得到某个虚拟地址的页号。</li><li><code>PADDR(x)</code>：include/mmu.h，将某个内核虚拟地址x转化为物理地址。（该宏要求x必须是kseg0中的虚拟地址）</li><li><code>KADDR</code>：include/mmu.h，返回物理地址 x 所位于 kseg0 的虚拟地址。</li><li><code>page2kva(pp)</code> ：得到 Page pp 的内核虚拟地址</li><li><code>page2pa(pp)</code> ：得到 Page pp 的物理地址 </li><li><code>pa2page(pa)</code> ：得到物理地址 pa 所对应的 Page 结构体（读取pte后可进行转换）</li><li><code>PPN(va)</code> ：得到虚拟地址 va 的页号</li><li><code>page2ppn(pp)</code>：得到 Page pp 的页号</li><li><code>memset(void *dst, int c, size_t n)</code> ：eg. memset((void *)alloced_mem, 0, n)。</li></ul><h3 id="链表宏"><a href="#链表宏" class="headerlink" title="链表宏"></a>链表宏</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type</span> *<span class="title">le_next</span>;</span> <span class="comment">// 指向下一个元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">type</span> **<span class="title">le_prev</span>;</span> <span class="comment">// 指向前一个元素链表项 le_next （当删除一个元素时，更改前一个元素链表项的le_next）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于往链表中插入元素操作解释如图（其中黄线表示需要进行的操作，操作顺序不一定如图。）</p><p><img src="https://s2.loli.net/2023/03/21/MYC5ZTfA2tzocb7.png" alt="image-20230321112349534"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> * Hint:</span><br><span class="line"> * Step <span class="number">1</span>: assign <span class="string">&#x27;elm.next&#x27;</span> from <span class="string">&#x27;listelm.next&#x27;</span>.</span><br><span class="line"> * Step <span class="number">2</span>: <span class="keyword">if</span> <span class="string">&#x27;listelm.next&#x27;</span> is not <span class="literal">NULL</span>, then assign <span class="string">&#x27;listelm.next.pre&#x27;</span> from a proper value.</span><br><span class="line"> * Step <span class="number">3</span>: assign <span class="string">&#x27;listelm.next&#x27;</span> from a proper value.</span><br><span class="line"> * Step <span class="number">4</span>: assign <span class="string">&#x27;elm.pre&#x27;</span> from a proper value.</span><br><span class="line"> */</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INSERT_AFTER(listelm, elm, field)                                                     \</span></span><br><span class="line"><span class="meta"><span class="comment">/* Exercise 2.2: Your code here. */</span> \</span></span><br><span class="line"><span class="meta">do &#123;\</span></span><br><span class="line"><span class="meta">LIST_NEXT((elm), field) = LIST_NEXT((listelm), field);\</span></span><br><span class="line"><span class="meta"><span class="keyword">if</span> (LIST_NEXT((listelm), field) != NULL) \</span></span><br><span class="line"><span class="meta">LIST_NEXT((listelm), field)-&gt;field.le_prev = &amp;(LIST_NEXT((elm), field));\</span></span><br><span class="line"><span class="meta">LIST_NEXT((listelm), field) = (elm);\</span></span><br><span class="line"><span class="meta">(elm)-&gt;field.le_prev = &amp;(LIST_NEXT((listelm), field));\</span></span><br><span class="line"><span class="meta">&#125; while (0)</span></span><br></pre></td></tr></table></figure><h3 id="页控制块"><a href="#页控制块" class="headerlink" title="页控制块"></a>页控制块</h3><blockquote><p>npage 个 Page 和 npage 个物理页面一一顺序对应，具体来说，npage 个 Page 的起始地址为 pages，则 pages[i] 对应从 0 开始计数的第 i 个物理页面。两者的转换可以使用 include/pmap.h 中的 page2pa 和 pa2page 这两个函数。</p></blockquote><p><code>page_free_list</code> : 空闲链表。（当一个进程需要分配内存时，将空闲链表头部的页控制块对应的那一页物理内存分配出去，同时将该页控制块从空闲链表的头部删去。）</p><p><code>freemem</code>：小于 freemem 对应物理地址的物理内存都已经被分配完了。（freemem是虚拟地址）</p><p><strong>pmap.c page_alloc 函数注意点</strong></p><p><code>memset(void *dst, int c, size_t n);</code>：第一个参数应为Page pp指向页面的虚拟地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*new = pp; <span class="comment">// new地址的内容为pp</span></span><br><span class="line">new = &amp;pp; <span class="comment">// new指针指向pp所在地址</span></span><br></pre></td></tr></table></figure><h3 id="为什么内核初始化的时候要把内核用到的物理页面pp-ref置1？"><a href="#为什么内核初始化的时候要把内核用到的物理页面pp-ref置1？" class="headerlink" title="为什么内核初始化的时候要把内核用到的物理页面pp_ref置1？"></a>为什么内核初始化的时候要把内核用到的物理页面pp_ref置1？</h3><p>物理页面的pp_ref通常用于跟踪物理页面的使用情况。当一个物理页面被映射到虚拟页表时，pp_ref会增加；删除映射关系后，pp_ref减1。如果此时pp_ref等于0就将这个物理页再添加到空闲物理页面链表里（即页面被释放）。在内核初始化期间，将内核需要使用的物理页面的pp_ref计数值设置为1，就是为了确保这些页面不会被释放，从而保证内核代码和数据的完整性和可靠性。</p><h3 id="虚拟内存管理"><a href="#虚拟内存管理" class="headerlink" title="虚拟内存管理"></a>虚拟内存管理</h3><p><code>PDX(va)</code> : 获取虚拟地址 va 的 31-22位(一级页表偏移)</p><p><code>PTX(va)</code> : 获取虚拟地址 va 的 21-12 位（二级页表偏移）</p><p><code>PTE_ADDR(pte)</code>: 获取页表项中的物理地址</p><p>在 Exercise 2.6时需要注意MIPS R3000 发出的地址均为虚拟地址，因此如果程序想访问某个物理地址，需要通过映射到该物理地址的虚拟地址来访问。对页表进行操作时处于内核态，因此使用宏 KADDR 获得其位于 kseg0 中的虚拟地址即可完成转换。</p><p><img src="https://s2.loli.net/2023/04/04/K6y1lOYvRqzbjsr.png" alt="image-20230327201609483"></p><h2 id="课上"><a href="#课上" class="headerlink" title="课上"></a>课上</h2><h3 id="exam"><a href="#exam" class="headerlink" title="exam"></a>exam</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>对于给定的页目录 <code>pgdir</code>，统计其包含的所有二级页表中满足以下条件的页表项：</p><ol><li>页表项有效；</li><li>页表项映射的物理地址为给定的 <code>Page *pp</code> 对应的物理地址；</li><li>页表项的权限包含给定的权限 <code>perm_mask</code>。</li></ol><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><code>pgdir</code> 应该理解为给定的页目录基地址，我们需要遍历所有页目录及其对应的所有二级页表项，统计满足条件的二级页表项的个数。另外注意需要判断页目录的有效性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">u_int <span class="title function_">page_perm_stat</span><span class="params">(Pde *pgdir, <span class="keyword">struct</span> Page *pp, u_int perm_mask)</span> &#123;</span><br><span class="line"><span class="comment">// count：统计满足条件的页表项的数量</span></span><br><span class="line">u_int count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 遍历页目录项</span></span><br><span class="line"><span class="keyword">for</span> (u_long i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 当前页目录项地址 pgdir_entryp = 页目录基地址 + 页内偏移</span></span><br><span class="line">Pde *pgdir_entryp = pgdir + i;</span><br><span class="line"><span class="comment">// 判断当前页目录是否有效</span></span><br><span class="line"><span class="keyword">if</span> (*pgdir_entryp &amp; PTE_V) &#123;</span><br><span class="line"><span class="comment">// 当前二级页表页基地址 pgtab_entryb = 当前页目录项指向的物理页号对应的虚拟地址</span></span><br><span class="line">Pte *pgtab_entryb = (Pte *)KADDR(PTE_ADDR(*pgdir_entryp)); <span class="comment">//</span></span><br><span class="line"><span class="keyword">for</span> (u_long j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++) &#123;</span><br><span class="line"><span class="comment">// 当前页表项地址 pte = 当前页表页基地址 + 页内偏移</span></span><br><span class="line">Pte *pte = pgtab_entryb + j;</span><br><span class="line"><span class="comment">// 判断条件 1 和条件 2</span></span><br><span class="line"><span class="keyword">if</span> ((*pte &amp; PTE_V) &amp;&amp; (page2pa(pp) == PTE_ADDR(*pte))) &#123;</span><br><span class="line"><span class="comment">// 判断条件 3</span></span><br><span class="line"><span class="keyword">if</span> (((*pte) &amp; perm_mask) == perm_mask) count ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><p><em>extra 挂了，发现只是因为忘了 memcpy复制的时候，需要把 page \</em>p 转换为虚拟地址 page2kva(p)。*</p><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>在理论课程中，我们学习了<strong>交换</strong>技术。它实现进程在内存与外存之间的交换，因而获得更多的虚拟内存空间。</p><p>简单来说，交换空间（swap）是外存上的一块区域，当系统物理内存不足时，内核会将内存中不常访问的数据保存到 swap 上，这样系统就有更多的物理内存为各个进程服务，而当系统需要访问 swap 上存储的内容时，再将 swap 上的数据加载到内存中。这样相当于我们获得了更多的虚拟存储（通过使用一部分外存）。</p><p>在本题中，我们会实现一个较为简单的交换机制，使得在没有空闲的物理页面时，可以暂时将正在使用的一页内存换出，同时释放出一页物理页面用于使用。</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>我们建立的交换机制可以分为两部分，“换入”部分，以及“换出”部分。</p><p>当我们没有空闲的物理页面时，我们进行“换出”，即申请物理页面时，如果没有可用的页面，我们换出一页正在使用的物理页，供申请者使用。</p><p>当我们需要访问某个 kuseg 段的虚拟地址时，我们会检查这个虚拟地址对应的虚拟页是否已被换出到外存，如果是，则我们将其“换入”。</p><blockquote><p>虚拟页被换入的物理页可能与其被换出时不同，但需要保证换入后<strong>物理页中的数据</strong>以及<strong>页表项中的权限位</strong>与换出时相同。为此，我们需要在换出时利用外存来保存数据。</p></blockquote><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p>在本题中，你需要使用物理地址属于 <code>[0x3900000, 0x3910000)</code> 的这 16 个物理页以及外存来实现“交换”。</p><ul><li>在本题中我们把这 16 个物理页叫做<strong>可交换</strong>的物理页。</li><li>为了区分这些<strong>可交换</strong>的物理页，我们建立了一个新的<strong>空闲可交换页面链表</strong> <code>page_free_swapable_list</code>。</li></ul><p>同时，我们将提供部分代码（请参看<strong>实验提供代码</strong>部分），你需要将其粘贴至 <code>kern/pmap.c</code> 之后，并补全或者实现如下几个函数：</p><h5 id="换出部分（struct-Page-swap-alloc-Pde-pgdir-u-int-asid-）"><a href="#换出部分（struct-Page-swap-alloc-Pde-pgdir-u-int-asid-）" class="headerlink" title="换出部分（struct Page *swap_alloc(Pde *pgdir, u_int asid)）"></a>换出部分（<code>struct Page *swap_alloc(Pde *pgdir, u_int asid)</code>）</h5><p>本函数的功能为：</p><ul><li>当存在<strong>空闲</strong>且<strong>可交换</strong>的物理页（<code>page_free_swapable_list</code> 链表非空），只需从 <code>page_free_swapable_list</code> 中取出头部并返回。</li><li>若不存在空闲且可交换的物理页（<code>page_free_swapable_list</code>链表为空），需要从 <code>[0x3900000, 0x3910000)</code> 中选取一个物理页，将其换出到外存，并将其返回。<ul><li>本题不限制页面置换的策略，也就是说，你可以使用任意策略来选取一个物理页，将其换出到外存。</li></ul></li></ul><p><strong>注意</strong>：</p><ul><li>实验提供代码中的 <code>swap_init</code> 函数将 <code>[0x3900000, 0x3910000)</code> 对应的 <code>Page</code> 结构体从 <code>page_free_list</code> 中移除并插入到 <code>page_free_swapable_list</code> 中。因此，<code>swap_alloc</code> 所返回的 <code>Page</code> 对应的物理页，其物理地址必须是处于 <code>[0x3900000, 0x3910000)</code> 中的。</li><li>我们<strong>保证</strong>：在每次测试中，传入的 <code>pgdir</code> 和 <code>asid</code> 是<strong>唯一</strong>的。</li></ul><h5 id="换入部分（void-swap-lookup-Pde-pgdir-u-int-asid-u-long-va-）"><a href="#换入部分（void-swap-lookup-Pde-pgdir-u-int-asid-u-long-va-）" class="headerlink" title="换入部分（void swap_lookup(Pde *pgdir, u_int asid, u_long va)）"></a>换入部分（<code>void swap_lookup(Pde *pgdir, u_int asid, u_long va)</code>）</h5><p>本函数的功能为：</p><ul><li>当地址空间 <code>asid</code> 中的虚拟地址 <code>va</code> 在页目录 <code>pgdir</code> 中存在映射，但对应物理页面被换出时，调用 <code>swap</code> 函数将其换入</li><li>调用 <code>page_lookup</code> 函数，返回 <code>va</code> 对应的页表项</li></ul><p><strong>注意</strong>：</p><ul><li>我们<strong>保证</strong>：在每次测试中，传入的 <code>pgdir</code> 和 <code>asid</code> 是<strong>唯一</strong>的</li><li>传入的 <code>va</code> <strong>不一定</strong>是页对齐的。</li></ul><p>本函数的实现已经给出，你需要实现该函数中调用的 <code>swap</code> 函数和 <code>is_swapped</code> 函数。</p><ul><li><code>int is_swapped(Pde *pgdir, u_long va)</code><ul><li>本函数的功能为：当虚拟地址 <code>va</code> 在页目录 <code>pgdir</code> 中存在映射且对应物理页面被换出时，返回非 <code>0</code> 值，否则返回 <code>0</code>。</li></ul></li><li><code>void swap(Pde *pgdir, u_int asid, u_long va)</code><ul><li>本函数的调用者需保证虚拟地址 <code>va</code> 映射到的物理页已被换出到外存。</li><li>本函数的具体功能为：将页目录 <code>pgdir</code> 中虚拟地址 <code>va</code> 映射的物理页从外存中换入内存，并且更新其对应的页表项。换入时需要使用 <code>swap_alloc</code> 来申请一个物理页。其中 <code>asid</code> 参数用于传递给 <code>swap_alloc</code> 函数、更新页表时无效化对应的 TLB 表项。</li></ul></li></ul><h4 id="外存模拟部分"><a href="#外存模拟部分" class="headerlink" title="外存模拟部分"></a>外存模拟部分</h4><p>由于还没有学习如何访问外存，我们使用一个数组 <code>swap_disk</code> 来模拟外存（大小为 64 个物理页大小）。</p><p>我们使用如下两个接口函数来申请、释放外存空间：</p><ul><li><p>```<br>u_char *disk_alloc()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 申请一页大小的外存空间（页对齐），返回值为这片空间的起始地址。外存空间的一页大小为 4096 字节，与内存中的页大小一致。</span><br><span class="line">    - 返回的地址为 kseg0 段的，指向 `swap_disk` 数组内空间的地址。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  void disk_free(u_char* da)</span><br></pre></td></tr></table></figure><ul><li>释放 <code>da</code> 起始的一页外存空间。</li></ul></li></ul><h4 id="设计提示"><a href="#设计提示" class="headerlink" title="设计提示"></a>设计提示</h4><p>我们给出一种可行的设计，当然，你也可以略过本节自己进行设计。</p><p>当没有空闲的物理页时，我们需要进行换出操作。在本设计中，我们在页表项中增加了一个新的标志位 <code>PTE_SWP</code>（在下发的头文件 <code>swap.h</code> 中已有定义）。</p><ul><li>当 <code>PTE_SWP</code> 为 <code>1</code> 且 <code>PTE_V</code> 为 <code>0</code> 时:<ul><li>对应的虚拟地址映射到的物理内存<strong>有效但被换出</strong>，实际的内容存在外存上，该页表项的高 20 位为内容在外存上的外存页号。</li></ul></li><li>软件应保证不会出现 <code>PTE_SWP</code> 为 <code>1</code> 且 <code>PTE_V</code> 为 <code>1</code> 的页表项。</li><li>当 <code>PTE_SWP</code> 为 <code>0</code> 时，页表项的含义与 Lab2 课下定义的相同。</li><li>我们可以通过 <code>da / BY2PG</code> 计算 <code>da</code> 对应的外存页号</li></ul><p>当我们希望将某个虚拟地址对应的物理页从外存中换入内存时：</p><ol><li>使用 <code>swap_alloc</code> 申请一个物理页 <code>p</code></li><li>将外存中以 <code>da</code> 起始的一页内容拷贝到该物理页 <code>p</code> 上（<code>da</code> 为换出时内容在外存上的地址）</li><li>对指定页表中，所有“ <code>PTE_SWP</code> 为 <code>1</code> 且 <code>PTE_V</code> 为 <code>0</code> 且高 20 位为 <code>da</code> 对应的外存页号”的页表项，做如下操作：<ol><li>将 <code>PTE_V</code> 置 <code>1</code></li><li>将 <code>PTE_SWP</code> 置 <code>0</code></li><li>在高 20 位中填入 <code>p</code> 对应的物理页号</li><li>维持其它权限位不变</li><li>无效化旧 TLB 表项</li></ol></li><li>使用 <code>disk_free</code> 释放 <code>da</code> 起始的一页外存空间</li></ol><p>当我们需要换出一个内存中的物理页至外存时：</p><ol><li><p>从 <code>[0x3900000, 0x3910000)</code> 的内存空间中，选择一个物理页 <code>p</code></p></li><li><p>使用 <code>disk_alloc</code> 申请一页大小的外存空间，记该外存空间的起始地址为 <code>da</code></p></li><li><p>对指定页表中，所有 <code>PTE_V</code> 为 <code>1</code> 且高 20 位为 <code>p</code> 的物理页号的页表项，做如下操作：</p><p>​    i. 将 <code>PTE_V</code> 置 <code>0</code></p><p>​    ii. 将 <code>PTE_SWP</code> 置 <code>1</code></p><p>​    iii. 在高 20 位中填入 <code>da</code> 对应的外存页号</p><p>​    iv. 维持其它权限位不变</p><p>​    v. 无效化旧 TLB 表项</p></li><li><p>将物理页 <code>p</code> 上的内容拷贝到外存中 <code>da</code> 起始的一页空间上</p></li><li><p>释放物理页 <code>p</code>，也就是将其插回 <code>page_free_swapable_list</code> 链表中</p></li></ol><h4 id="任务总结"><a href="#任务总结" class="headerlink" title="任务总结"></a>任务总结</h4><p>在提交前，你需要完成以下任务：</p><ul><li>换入部分：<ul><li>完成 <code>is_swapped</code> 函数。</li><li>完成 <code>swap</code> 函数，维护 <code>page_free_swapable_list</code> 链表，适时无效化 TLB 中的旧表项。</li></ul></li><li>换出部分：<ul><li>完成 <code>swap_alloc</code> 函数，维护 <code>page_free_swapable_list</code> 链表，适时无效化 TLB 中的旧表项。</li></ul></li></ul><p>本题不涉及课下代码的修改。</p><h4 id="实验提供代码"><a href="#实验提供代码" class="headerlink" title="实验提供代码"></a>实验提供代码</h4><p>请将本部分提供代码附加在你的 <code>kern/pmap.c</code> 的尾部，然后开始做题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;swap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page_list</span> <span class="title">page_free_swapable_list</span>;</span></span><br><span class="line"><span class="type">static</span> u_char *<span class="title function_">disk_alloc</span><span class="params">()</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disk_free</span><span class="params">(u_char *pdisk)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap_init</span><span class="params">()</span> &#123;</span><br><span class="line">LIST_INIT(&amp;page_free_swapable_list);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = SWAP_PAGE_BASE; i &lt; SWAP_PAGE_END; i += BY2PG) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">pp</span> =</span> pa2page(i);</span><br><span class="line">LIST_REMOVE(pp, pp_link);</span><br><span class="line">LIST_INSERT_HEAD(&amp;page_free_swapable_list, pp, pp_link);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interface for &#x27;Passive Swap Out&#x27;</span></span><br><span class="line"><span class="keyword">struct</span> Page *<span class="title function_">swap_alloc</span><span class="params">(Pde *pgdir, u_int asid)</span> &#123;</span><br><span class="line"><span class="comment">// Step 1: Ensure free page</span></span><br><span class="line"><span class="keyword">if</span> (LIST_EMPTY(&amp;page_free_swapable_list)) &#123;</span><br><span class="line"><span class="comment">/* Your Code Here (1/3) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: Get a free page and clear it</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">pp</span> =</span> LIST_FIRST(&amp;page_free_swapable_list);</span><br><span class="line">LIST_REMOVE(pp, pp_link);</span><br><span class="line"><span class="built_in">memset</span>((<span class="type">void</span> *)page2kva(pp), <span class="number">0</span>, BY2PG);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interfaces for &#x27;Active Swap In&#x27;</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">is_swapped</span><span class="params">(Pde *pgdir, u_long va)</span> &#123;</span><br><span class="line"><span class="comment">/* Your Code Here (2/3) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">swap</span><span class="params">(Pde *pgdir, u_int asid, u_long va)</span> &#123;</span><br><span class="line"><span class="comment">/* Your Code Here (3/3) */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pte <span class="title function_">swap_lookup</span><span class="params">(Pde *pgdir, u_int asid, u_long va)</span> &#123;</span><br><span class="line"><span class="comment">// Step 1: If corresponding page is swapped out, swap it in</span></span><br><span class="line"><span class="keyword">if</span> (is_swapped(pgdir, va)) &#123;</span><br><span class="line">swap(pgdir, asid, va);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: Look up page table element.</span></span><br><span class="line">Pte *ppte;</span><br><span class="line">page_lookup(pgdir, va, &amp;ppte);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: Return</span></span><br><span class="line"><span class="keyword">return</span> ppte == <span class="literal">NULL</span> ? <span class="number">0</span> : *ppte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disk Simulation (Do not modify)</span></span><br><span class="line">u_char swap_disk[SWAP_DISK_NPAGE * BY2PG] __attribute__((aligned(BY2PG)));</span><br><span class="line">u_char swap_disk_used[SWAP_DISK_NPAGE];</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> u_char *<span class="title function_">disk_alloc</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> alloc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;alloc &lt; SWAP_DISK_NPAGE &amp;&amp; swap_disk_used[alloc]; alloc++) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">assert(alloc &lt; SWAP_DISK_NPAGE);</span><br><span class="line">swap_disk_used[alloc] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;swap_disk[alloc * BY2PG];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">disk_free</span><span class="params">(u_char *pdisk)</span> &#123;</span><br><span class="line"><span class="type">int</span> offset = pdisk - swap_disk;</span><br><span class="line">assert(offset % BY2PG == <span class="number">0</span>);</span><br><span class="line">swap_disk_used[offset / BY2PG] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> Page *<span class="title function_">swap_alloc</span><span class="params">(Pde *pgdir, u_int asid)</span> &#123;</span><br><span class="line"><span class="comment">// Step 1: Ensure free page</span></span><br><span class="line"><span class="keyword">if</span> (LIST_EMPTY(&amp;page_free_swapable_list)) &#123;</span><br><span class="line"><span class="comment">/* Your Code Here (1/3) */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">p</span> =</span> pa2page(<span class="number">0x3900000</span>);</span><br><span class="line">u_long da = (u_long)disk_alloc();</span><br><span class="line"><span class="keyword">for</span> (u_long i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</span><br><span class="line">Pde *pgdir_entryp = pgdir + i;</span><br><span class="line"><span class="keyword">if</span> (*pgdir_entryp &amp; PTE_V) &#123;</span><br><span class="line">Pte *tmp = (Pte *)KADDR(PTE_ADDR(*pgdir_entryp));</span><br><span class="line"><span class="keyword">for</span> (u_long j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++) &#123;</span><br><span class="line">Pte *pte = tmp + j;</span><br><span class="line"><span class="keyword">if</span> ((*pte &amp; PTE_V) &amp;&amp; PTE_ADDR(*pte) == <span class="number">0x3900000</span>) &#123;</span><br><span class="line"><span class="comment">// 维持其他权限位保持不变</span></span><br><span class="line">*pte = PTE_ADDR(da) | (*pte &amp; <span class="number">0xfff</span>);</span><br><span class="line">*pte = (*pte &amp; ~PTE_V) | PTE_SWP; <span class="comment">// 注意优先级</span></span><br><span class="line">                        <span class="comment">// tlb_invalidate(asid, va);</span></span><br><span class="line">tlb_invalidate(asid, (i &lt;&lt; <span class="number">22</span>) + (j &lt;&lt; <span class="number">12</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span> *)da, (<span class="type">void</span> *)page2kva(p), BY2PG);</span><br><span class="line">        <span class="comment">// 没有清空 Page P 是因为在下一次使用 p 的时候会初始化</span></span><br><span class="line">LIST_INSERT_HEAD(&amp;page_free_swapable_list, p, pp_link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: Get a free page and clear it</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">pp</span> =</span> LIST_FIRST(&amp;page_free_swapable_list);</span><br><span class="line">LIST_REMOVE(pp, pp_link);</span><br><span class="line"><span class="built_in">memset</span>((<span class="type">void</span> *)page2kva(pp), <span class="number">0</span>, BY2PG);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interfaces for &#x27;Active Swap In&#x27;</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">is_swapped</span><span class="params">(Pde *pgdir, u_long va)</span> &#123;</span><br><span class="line"><span class="comment">/* Your Code Here (2/3) */</span></span><br><span class="line">Pde *pgdir_entryp = pgdir + PDX(va);</span><br><span class="line"><span class="keyword">if</span> (!(*pgdir_entryp &amp; PTE_V)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">Pte *pte = (Pte *)KADDR(PTE_ADDR(*pgdir_entryp)) + PTX(va);</span><br><span class="line"><span class="keyword">if</span> ((*pte &amp; PTE_SWP) &amp;&amp; ~(*pte &amp; PTE_V)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">swap</span><span class="params">(Pde *pgdir, u_int asid, u_long va)</span> &#123;</span><br><span class="line"><span class="comment">/* Your Code Here (3/3) */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">p</span> =</span> swap_alloc(pgdir, asid);</span><br><span class="line"></span><br><span class="line">u_long da = PTE_ADDR(*((Pte *)KADDR(PTE_ADDR(*(pgdir + PDX(va)))) + PTX(va)));</span><br><span class="line">u_long kva = page2kva(p);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span> *)kva, (<span class="type">void</span> *)da, BY2PG);</span><br><span class="line"><span class="keyword">for</span> (u_long i = <span class="number">0</span>; i &lt; <span class="number">1024</span>; i++) &#123;</span><br><span class="line">                 Pde *pgdir_entryp = pgdir + i;</span><br><span class="line">                 <span class="keyword">if</span> (*pgdir_entryp &amp; PTE_V) &#123;</span><br><span class="line">                         Pte *tmp = (Pte *)KADDR(PTE_ADDR(*pgdir_entryp));</span><br><span class="line">                         <span class="keyword">for</span> (u_long j = <span class="number">0</span>; j &lt; <span class="number">1024</span>; j++) &#123;</span><br><span class="line">                                 Pte *pte = tmp + j;</span><br><span class="line">                                 <span class="keyword">if</span> (PTE_ADDR(*pte) == da &amp;&amp; (*pte &amp; PTE_SWP) &amp;&amp; ~(*pte &amp; PTE_V)) &#123;</span><br><span class="line"> *pte = PTE_ADDR(page2pa(p)) | (*pte &amp; <span class="number">0xfff</span>);</span><br><span class="line">*pte = (*pte &amp; ~PTE_SWP) | PTE_V ;</span><br><span class="line"> tlb_invalidate(asid, (i &lt;&lt; <span class="number">22</span>) + (j &lt;&lt; <span class="number">12</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">                         &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">disk_free((u_char *)da);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验体会"><a href="#实验体会" class="headerlink" title="实验体会"></a>实验体会</h2><p>感觉自己目前主要是学习方法上的问题，比较依赖课上视频的讲解（视频内容比较详细，个人没有更多思考）。在 hint帮助下能完成实验，但是对实验的整体架构和一些原理还是比较模糊的概念，导致课上摸索着上机的感觉。给自己的建议是提早写课下（也就是在视频讲解出之前自己先写一遍课下，遇到问题动动脑子，多联系上下文）</p>]]></content>
      
      
      
        <tags>
            
            <tag> OS实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA OO第二单元——多线程实时电梯系统</title>
      <link href="/2023/04/01/OO-unit2/"/>
      <url>/2023/04/01/OO-unit2/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 本次作业的基本目标是模拟<strong>多线程实时电梯系统</strong>，熟悉线程的创建、运行等基本操作，熟悉多线程程序的设计方法，掌握线程安全知识并解决线程安全问题。</p></blockquote><p><em>这是出到 hw6 的版本 ~</em></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于第五次作业对电梯调度策略和电梯运行策略没有理解清楚，导致逻辑混乱，对电梯的状态更新复杂从而出现了bug，以及调度策略有问题导致时间性能较差。于是第六次作业进行了重构，采取了新的策略，目前评测机反馈正确性和性能都是可以的。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><ol><li>修饰类：表明这个类不能被继承。</li><li>修饰方法：把方法锁定，以防任何继承类修改它的含义。</li><li>修饰变量：对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li></ol><h3 id="线程的互斥处理（monitor）——-synchronized"><a href="#线程的互斥处理（monitor）——-synchronized" class="headerlink" title="线程的互斥处理（monitor）—— synchronized"></a>线程的互斥处理（monitor）—— synchronized</h3><p>一个实例中的 synchronized 方法每次只能由一个线程运行，对非 synchronized 方法没有影响。</p><p>每个实例拥有独立的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// synchronized 代码块</span></span><br><span class="line"><span class="keyword">synchronized</span>(expr) &#123; <span class="comment">// expr 为获取锁的实例</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// synchronized 实例方法和 synchronized 代码块</span></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> method &#123; <span class="comment">// 使用this的锁来执行线程的互斥处理</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> method &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程的协作-——-wait-notify-notifyAll"><a href="#线程的协作-——-wait-notify-notifyAll" class="headerlink" title="线程的协作 —— wait, notify, notifyAll"></a>线程的协作 —— wait, notify, notifyAll</h3><p>wait, notify, notifyAll 都是 java.lang.Object 类的方法。</p><p>每个实例都拥有一个等待队列，放置在执行实例的 wait 方法后停止操作的线程。</p><p>若要执行 wait, notify, notifyAll 操作，线程必须持有锁。如果线程进入等待队列，便会释放其实例的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj.wait(); <span class="comment">// 线程正在obj上等待</span></span><br><span class="line">wait; <span class="comment">// 线程正在this上等待</span></span><br><span class="line"><span class="built_in">this</span>.wait(); <span class="comment">// 线程正在this上等待</span></span><br><span class="line"></span><br><span class="line">obj.notifyAll(); <span class="comment">// 在obj实例的等待队列中休眠的所有线程都会被唤醒 </span></span><br><span class="line">notifyAll(); <span class="comment">// 在this实例的等待队列中休眠的所有线程都会被唤醒 </span></span><br><span class="line"><span class="built_in">this</span>.notifyAll(); <span class="comment">// 在this实例的等待队列中休眠的所有线程都会被唤醒 </span></span><br></pre></td></tr></table></figure><h3 id="Producer-Consumer-模式"><a href="#Producer-Consumer-模式" class="headerlink" title="Producer-Consumer 模式"></a><a href="https://blog.csdn.net/yangsf_/article/details/123760952?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8Bjava%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-123760952.142^v75^control,201^v4^add_ask,239^v2^insert_chatgpt&amp;spm=1018.2226.3001.4187">Producer-Consumer 模式</a></h3><ul><li>Data：由 Producer 生成，供 Consumer 使用。</li><li>Producer： Producer 生成 Data，并将其传递给 Channel。</li><li>Consumer：从 Channel 获取 Data 并使用。</li><li>Channel：保管从 Producer 获取的 Data，并响应 Consumer 的请求，传递 Data。为了确保安全性，Channel 会对 Producer 和 Consumer 的访问执行互斥处理。</li></ul><p>一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Buffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Buffer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Producer</span>(buffer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(buffer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Buffer buffer;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Buffer buffer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buffer = buffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           buffer.push();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Buffer buffer;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Buffer buffer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buffer = buffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            buffer.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">haveGoods</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 生产者放入商品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (haveGoods) &#123; <span class="comment">// 已有货物，消费者取出商品</span></span><br><span class="line">            <span class="comment">// 生产者等待消费者消费</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!haveGoods)&#123; <span class="comment">// 被消费者通知生产</span></span><br><span class="line">            cnt ++;</span><br><span class="line">            System.out.println(<span class="string">&quot;Producer put:&quot;</span> + cnt);</span><br><span class="line">            haveGoods = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep((<span class="type">int</span>)(Math.random()*<span class="number">100</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">            <span class="comment">// 通知消费者消费</span></span><br><span class="line">            <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 消费者取出商品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!haveGoods) &#123; <span class="comment">// 没有货物，生产者生产商品</span></span><br><span class="line">            <span class="comment">// 消费者等待生产者生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (haveGoods) &#123; <span class="comment">// 被生产者通知消费</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer get:&quot;</span> + cnt);</span><br><span class="line">            haveGoods = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 通知生产者生产</span></span><br><span class="line">            <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>以上参考《图解 Java 多线程设计模式》。</em></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>模拟多线程实时电梯系统。系统从标准输入中输入请求信息，程序进行接收和处理，模拟电梯运行，将必要的运行信息通过输出接口进行输出。 具体而言，本次作业电梯系统具有的功能为：上下行，开关门，以及模拟乘客的进出，以及模拟电梯系统扩建和日常维护时乘客的调度。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>看完题目，我们先理清一些概念：</p><p><strong>电梯调度策略</strong>：把请求分配给电梯时采取的策略。</p><p><strong>电梯运行策略</strong>：电梯处理自己的请求队列采取的策略。</p><p>通过题目可以发现程序要干的事情无非是：① 获取输入的请求信息；② 处理请求信息：若请求为乘客，则将乘客分配给电梯；若请求为电梯扩建和维护，就更新电梯。③ 电梯接送乘客到指定楼层。</p><p>根据多线程设计模式并参考了第三次实验下发的模板代码，我们确定线程数及线程所做的工作为：</p><ol><li>输入线程。接收输入请求，若为乘客请求，就将其放入总乘客队列；若为电梯扩建和维护请求，就更新 vector\<elevator\> 。</li><li>调度线程。根据电梯调度策略，将总乘客请求分配给每部电梯的等待队列。</li><li>电梯线程。有多少部电梯就有多少个电梯线程，它们之间相互独立的处理各自的等待队列。</li></ol><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>类：</p><ul><li>MainClass：初始化实例和开启线程。</li><li>InputThread：获取输入的请求，若为乘客请求，就将其放入总乘客队列；若为电梯扩建和维护请求，就更新 vector\<elevator\> 。</li><li>WaitQueue：总乘客队列。</li><li>Schedule：根据电梯调度策略，将乘客请求分配给电梯的等待队列。</li><li>Elevator：记录电梯的状态，模拟电梯运行过程。</li><li>Strategy：得到电梯下一状态。</li><li>RequestQueue：电梯的等待队列。</li><li>Person：电梯的等待队列。</li><li>Counter：计数器，判断乘客请求是否都处理完，用于线程终止判断。</li></ul><p><img src="https://s2.loli.net/2023/04/02/g3nbYQPhyVjxSTm.png" alt="image-20230402020924870"></p><p><em>还没有画类图和时序图啦~ 不如先看看idea自动生成的叭~</em></p><h2 id="线程设计"><a href="#线程设计" class="headerlink" title="线程设计"></a>线程设计</h2><p>在上文分析中，我们已经确定了线程的种类及其个数，在此回顾一下：</p><ul><li>主线程进行初始化和启动其他线程。</li><li>输入线程获取输入的请求。若请求为 PersonRequest ，就用 addRequest 方法将其放入 WaitQueue 总队列；若请求为 ElevatorRequest，就用 expandElevator 方法将新增电梯放入 ElevatorQueue 电梯队列；瑞请求为 MaintainRequest，就用 maintainElevator 方法维护电梯。</li><li>调度线程将请求分配给电梯。调度线程从 WaitQueue 中用 getRequest 获取请求，遍历 ElevatorQueue 将请求发给加入该请求后模拟花费时间最少的电梯的 RequestQueue。</li><li>电梯线程处理 RequestQueue，模拟电梯上行、下行、开关门等行为。其利用 Strategy 获得电梯下一状态，从 RequestQueue 中获取 canPutOn 的请求。</li></ul><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>线程安全（thread-safe）是关于对象对象是否能被多个线程安全访问的特性。如果一个对象是线程安全的，则无论多个线程以什么样的交叠次序来访问都不会影响该对象的行为结果。</p><p>线程安全的设计考虑：</p><ul><li>使用不可变对象</li><li>使用可变对象<ul><li>操作的原子性</li><li>共享对象要始终处于严密控制之下</li><li>设置范围适当的临界区（临界区最小化）</li><li>使用合适的监控器</li></ul></li></ul><p>在我的程序中主要通过 synchronized 语句块完成线程互斥。</p><p>此外，对象共享是产生线程安全问题的根本原因。在思考某一部分代码是否会产生线程安全问题时，可以思考其是否会被多个线程访问，线程访问的读写关系等。</p><h3 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h3><p>当某个线程卡在临界区或一直获取不到资源时，会发生轮询，会比较耗费CPU。当你提交时如果遇到 CTLE 可以考虑代码中是否有轮询。比如说当 Schedule 想要获取乘客请求时，waitQueue 为空，此时我们可以让该线程进入 waitQueue 的等待队列，也就是让它 wait 一下。当 waitQueue 非空（即输入线程把乘客请求给了 waitQueue）时，唤醒 waitQueue 的等待队列 （notifyAll）。该部分可以参考前文提到的 Producer-Consumer 模式或 Guard Suspension 模式。</p><h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><p>线程应该在什么时候终止是一个必须要解决的问题，否则线程一直无法终止会引发 RTLE 问题。这一部分内容有学长推荐看《图解Java多线程设计模式》中的 <strong>Two Phase Termination</strong> 这一章。我主要是通过实验代码理解。当输入结束，所有乘客请求都处理完成，那么程序就结束了。在介绍每个线程的结束条件之前，我们先来看看线程是如何结束的。run 方式是线程的入口，也是线程结束的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (线程结束条件) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">do</span> someting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入线程：由官方文档可知，当读入的 request == null 时说明输入结束，此时传递给 waitQueue end标志位，并结束输入线程。</li><li>调度线程：在hw5中当输入线程结束并且总队列为空时即可结束调度线程。但是在 hw6 中电梯维护时会把请求还给总队列，前面的条件会触发bug。所以在hw6中我将结束条件改为输入线程结束并且总队列为空并且所有请求已处理完毕（用counter静态类记录请求的出入），此时传递给 RequestQueue end标志位。</li><li>电梯线程：当 requestQueue end标志位为 true 时结束线程。</li></ul><p>具体实现可以参考实验代码。 </p><h3 id="多线程调试"><a href="#多线程调试" class="headerlink" title="多线程调试"></a>多线程调试</h3><ul><li>利用调试功能。可以根据输出大致判断出bug触发地，据此选定断点。比如说电梯门开了之后乘客却没有进来，此时就将断点设置在开门的方法。</li><li>利用 printf 输出。可以输出电梯状态改变、请求状态改变（进入等待队列等信息）、线程状态改变以及观察时间戳等判断。</li><li>有同学跟我分享了一种方法：设置一个 Debug 类，通过 stderr 抛出异常，这样也不会影响输出检测。</li></ul><h2 id="电梯调度策略"><a href="#电梯调度策略" class="headerlink" title="电梯调度策略"></a>电梯调度策略</h2><p>电梯调度有很多策略：(1) 模拟电梯保证局部最优解的策略，在输入线程获得一个请求时，深克隆电梯类进行模拟从而将请求分配各所花费时间最少的电梯。(2) 较为均衡的分配方式（第 i 位乘客分配给第 (i % 6) 座电梯），当输入请求数量较多的时候，性能上也还不错。(3) 随机分配方式 random，其实和前者策略差不多。(4) 自由竞争策略，所有电梯共用输入线程的请求队列，当输入一个请求时，所有电梯都努力去获取这个请求，这种策略在时间性能上占据优势，但是电量消耗会比较高。</p><p>我在 hw6 中实现了电梯模拟策略，也就是往届所说的 影子电梯。其主要思想为：对于每一个待分配的请求，“涉克隆”电梯此时的状态，将请求放入电梯的等待队列，进行模拟（将上下行开门的 <code>sleep(400)</code> 改为 <code>time += 400</code>），选择最早结束的电梯接收这个请求。和周围同学比较发现这种策略在运行时间和耗电量都比较优。</p><h2 id="电梯运行策略"><a href="#电梯运行策略" class="headerlink" title="电梯运行策略"></a>电梯运行策略</h2><p>我采用了 <strong>look</strong> 算法：当电梯在往上走时，如果遇到向上的请求就捎带上，当<strong>电梯内没有乘客并且电梯前方没有等待的请求</strong>时就换方向。当到达某一楼层时，如果电梯未满并且请求与电梯运行方向一致时，就开门捎带上请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">nextState</span> <span class="operator">=</span> strategy.getStrategy(floor, direction, fullNum, curInRequests, requestQueue); <span class="comment">// strategy 获取电梯下一状态</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEnd</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">switch</span> (nextState) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;open&quot;</span>:</span><br><span class="line">        openAndClose();</span><br><span class="line">        preTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;keep&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> (direction) &#123; up(); &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; down(); &#125;</span><br><span class="line">        preTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;reverse&quot;</span>:</span><br><span class="line">        direction = !direction;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;wait&quot;</span>:</span><br><span class="line">        direction = <span class="literal">true</span>;</span><br><span class="line">        requestQueue.waitRequest();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">        isEnd = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li><p>往届学长提出了“量子电梯”的概念：</p><p>当电梯在等待时，电梯的请求队列获得了请求，电梯开始运动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[time1] ARRIVE floor1</span><br><span class="line">[time2] begin wait</span><br><span class="line">[time3] end wait</span><br><span class="line">[time4] ARRIVE floor2</span><br></pre></td></tr></table></figure><p>按照一般同学们的处理，有 $time4 = time3 + 0.4$ 。</p><p>然而我们可以利用 wait 的时间，因为我们仅需保证 <code>time4 - time1 &gt; 0.4</code> 。</p><p>具体实现就是记录电梯最后一次关门、上下行的时间，然后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">up</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (currentTime - preTime &lt; speed) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(speed - currentTime + preTime);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    floor++;</span><br><span class="line">    TimableOutput.println(String.format(<span class="string">&quot;ARRIVE-%d-%d&quot;</span>, floor, id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当电梯收到维护请求的时候，需要将电梯还未送达的乘客请求返回给 waitQueue，为了尽量缩短乘客的等待时间，将请求返回到 waitQueue 的队首使他们有限被分配。</p></li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>​    真的好喜欢自己重构后的代码，感觉对线程安全和电梯策略处理的都挺清晰的，在 Toby 的性能测试平台上每个店都能达到99.9以上。希望能安全度过 hw6 的强测和互测啦~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Object Oriented </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA OO第一单元——递归下降处理表达式</title>
      <link href="/2023/02/28/OO-unit1/"/>
      <url>/2023/02/28/OO-unit1/</url>
      
        <content type="html"><![CDATA[<h1 id="北航OO第一单元作业总结"><a href="#北航OO第一单元作业总结" class="headerlink" title="北航OO第一单元作业总结"></a>北航OO第一单元作业总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>通过对表达式结构进行建模，完成多变量多项式的括号展开，初步体会层次化设计的思想。</p></blockquote><p>然而我对自己的设计并不是很满意，当完成第三次作业的时候代码行数已经达到了993行。还有许多可以改进之处，在此进行总结。</p><h2 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h2><h3 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h3><blockquote><p>读入一个包含加、减、乘、乘方以及括号（其中括号的深度<strong>至多为 1 层</strong>）的<strong>多变量</strong>表达式，输出<strong>恒等变形展开所有括号后</strong>的表达式。</p></blockquote><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p>我采用的是<strong>递归下降算法</strong>，先将表达式进行语法解析，再计算化简。根据课程提供的形式化表述，表达式解析为：</p><ul><li>Expr：表达式及表达式因子</li><li>Term：项</li><li>ExprPow：表达式及对于指数</li><li>Number：常数因子</li><li>Power：变量因子</li></ul><p>具体的类图如下：</p><p><img src="https://s2.loli.net/2023/03/18/aAwBK9H1xLWIjgO.png" alt="image-20230317163205842"></p><h4 id="架构解析"><a href="#架构解析" class="headerlink" title="架构解析"></a>架构解析</h4><p>本次作业可以分为三个部分，第一个是表达式模型，第二个是表达式解析，第三个是表达式化简。</p><h5 id="表达式模型"><a href="#表达式模型" class="headerlink" title="表达式模型"></a>表达式模型</h5><p>根据题目提供的形式化表述(摘录部分)：</p><blockquote><p>表达式 → 空白项 [加减 空白项] 项 空白项 | 表达式 加减 空白项 项 空白项</p><p>项 → [加减 空白项] 因子 | 项 空白项 ‘*’ 空白项 因子</p><p>因子 → 变量因子 | 常数因子 | 表达式因子</p><p>变量因子 → 幂函数</p><p>常数因子 → 带符号的整数</p><p>表达式因子 → ‘(‘ 表达式 ‘)’ [空白项 指数]</p><p>幂函数 → (‘x’ | ‘y’ | ‘z’) [空白项 指数]</p></blockquote><p>表达式由项组成（用 <code>Arraylist</code> 存储项，加减合并到项中）；项由三类因子组成，这里使用了 <code>Factor</code> 接口，首个因子前的加减作为一个因子存入项中；变量因子、常熟因子、表达式因子分别为 <code>Power</code> ，<code>Number</code>， <code>Expr</code>类中。</p><h5 id="表达式解析"><a href="#表达式解析" class="headerlink" title="表达式解析"></a>表达式解析</h5><p>语法分析主要参考了OO课程组发布的预习文章中的递归下降算法的代码。<code>Lexer</code>类实现词法分析，实现加减、变量、数字等基本单元的提取。<code>Parser</code> 类对表达式进行语法分析，主要采用递归调用的方法。</p><h5 id="表达式化简"><a href="#表达式化简" class="headerlink" title="表达式化简"></a>表达式化简</h5><p>由于不存在嵌套括号，表达式即为 $A+B+…+Z$ （其中A, B, …, Z为项）的形式，可以先将项进行乘法展开，再进行加法。另外注意到化简完的式子均形如 A*x**B*y**C*z**D  (A, B, C, D 均为常数)，在进行乘法化简的时候只需要统计项中 A, B, C, D的值，在进行加法化简的时候可以考虑使用 <code>HashMap&lt;key, value&gt;</code>, <code>key</code>应为 $x$, $y$, $z$的指数的键值对，可应用 <code>key=(String)(B|C|D)</code> （这样可以避免重写 <code>HashMap</code> 的 <code>equals</code> 和 <code>hashcode</code> 方法）。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li><p>如何处理空白字符及符号问题？</p><p>对于空白字符，由于本次作业不需要我们判断输入的合法性，所以对于输入的字符串 <code>input</code> ，直接过滤掉所有空白字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = input.replaceAll(<span class="string">&quot;[ \t]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>对于符号，我们注意到：①<strong>常数因子</strong>带符号；②在<strong>项</strong>的第一个因子前可以带一个正负号；③在<strong>表达式</strong>的第一项之前可以带一个正负号；④表达式中项与项之间的加减号。    在出现符号的相应位置，如果是 <code>-</code>，就转化为项中的一个 $-1$ 的常数因子，例如 -x=-1*x ；如果是 <code>+</code>，忽略即可。同时我们也可以预处理连续的 <code>+-</code> 和 <code>*+</code> 等情况进行优化。</p></li><li><p>如何处理 <em>表达式因子 → ‘(‘ 表达式 ‘)’ [空白项 指数]</em> ？</p><p>我在 Training 给的模板的基础上新增了 <code>ExprPow</code> 类。在语法分析时，当项中读到了 <code>ExprPow</code> 类的因子，就把其展开为 Expr*Expr*…*Expr 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExprPow</span> <span class="keyword">implements</span> <span class="title class_">Factor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expr baseExpr;</span><br><span class="line">    <span class="keyword">private</span> Integer exponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意细节</p><p>例如，$0**0=1$ ，其中，前者的 0 可以为满足题意的任意表达式因子化简后的结果。</p></li></ol><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>对比最冗余的输出，除了在上文表达式化简中提及的同类项合并外，可以考虑优化项为0，项的系数为1，变量的指数为0或1等的情形，以下主要说明相对不易考虑到的两点：</p><ol><li>由于表达式第一项的正负号可以省略，我们应尽量保证其为正的，此时我们可以考虑如果该项为负，就放到生成的字符串结果的末尾，如果为正，就放到生成的字符串结果的开头。然后判断字符串首字母是否为 <code>+</code>。</li><li><code>x*x</code> 比 <code>x**2</code> 更优。</li></ol><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><div class="table-container"><table><thead><tr><th>Expr.addSimplify()</th><th>15.0</th><th>1.0</th><th>6.0</th><th>6.0</th></tr></thead><tbody><tr><td>Expr.addTerm(Term)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.Expr()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.getTerms()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.printExpr(HashMap)</td><td>38.0</td><td>4.0</td><td>15.0</td><td>17.0</td></tr><tr><td>Expr.printXyz(char, BigInteger, int)</td><td>15.0</td><td>1.0</td><td>9.0</td><td>9.0</td></tr><tr><td>ExprPow.ExprPow(Expr, Integer)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.getBaseExpr()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.getNumber()</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Lexer.Lexer(String)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.next()</td><td>7.0</td><td>2.0</td><td>5.0</td><td>6.0</td></tr><tr><td>Lexer.peek()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>MainClass.main(String[])</td><td>18.0</td><td>3.0</td><td>11.0</td><td>12.0</td></tr><tr><td>Number.getNum()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.Number(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.exprFactor()</td><td>5.0</td><td>3.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Parse.numberFactor()</td><td>11.0</td><td>1.0</td><td>8.0</td><td>8.0</td></tr><tr><td>Parse.Parse(Lexer)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.parseExpr()</td><td>7.0</td><td>1.0</td><td>7.0</td><td>7.0</td></tr><tr><td>Parse.parseFactor()</td><td>4.0</td><td>1.0</td><td>5.0</td><td>5.0</td></tr><tr><td>Parse.parseTerm()</td><td>11.0</td><td>1.0</td><td>6.0</td><td>6.0</td></tr><tr><td>Parse.powerFactor()</td><td>24.0</td><td>9.0</td><td>6.0</td><td>9.0</td></tr><tr><td>Power.add(int, int, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.getXx()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.getYy()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.getZz()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.Power(int, int, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.addFactor(Factor)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.addTerm(Term)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.getFactors()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.multiply()</td><td>34.0</td><td>1.0</td><td>11.0</td><td>11.0</td></tr><tr><td>Term.multsimplify(Term)</td><td>4.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Term.Term()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Total</td><td>195.0</td><td>50.0</td><td>118.0</td><td>125.0</td></tr><tr><td>Average</td><td>5.735294117647059</td><td>1.4705882352941178</td><td>3.4705882352941178</td><td>3.676470588235294</td></tr></tbody></table></div><p>由于输出字符串全都集中在了<code>Expr</code> 类的 <code>printExpr</code> 方法中，复杂度较高；由于 <code>power</code> 类中存储的是 x, y, z 的次数，导致 <code>Parse</code> 类的 <code>PowerFactor</code>方法复杂度较高；在乘法计算时，由于一开始写的是先完全进行乘法展开再合并同类项，发现容易爆栈，于是直接在此基础上进行了修改，复杂度也比较高。</p><h3 id="bug-分析"><a href="#bug-分析" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>本次作业遇到的bug主要是先完全进行乘法展开再合并同类项，发现容易爆栈，于是改成了在处理项的过程中就插入同类项合并操作。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然本次作业强测满分，互测没有被 hack，但整体的架构还是不太满意的，比如不支持括号嵌套，对 <code>power</code>的处理比较复杂，字符串输出难以迭代。这些都在后面的作业中有修改。</p><h2 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h2><h3 id="题目简述-1"><a href="#题目简述-1" class="headerlink" title="题目简述"></a>题目简述</h3><blockquote><p>读入<strong>一系列自定义函数的定义</strong>以及一个包含幂函数、三角函数、自定义函数调用的<strong>表达式</strong>，输出<strong>恒等变形展开所有括号后</strong>的表达式。</p></blockquote><h3 id="整体架构-1"><a href="#整体架构-1" class="headerlink" title="整体架构"></a>整体架构</h3><p>本次我才用了 <strong>边分析边化简</strong> 的方法，比起第一次作业采用的先分析后化简明显是有利的。</p><h4 id="迭代内容"><a href="#迭代内容" class="headerlink" title="迭代内容"></a>迭代内容</h4><p>对于表达式解析，新增了 <code>Trigon</code> 类存储三角函数（然而我的 <code>Expr</code> , <code>ExprPow</code>, <code>Trigon</code> 类是可以合并的）。</p><p>新增了 <code>CusFuncProcess</code> 和 <code>CusFunction</code> 来处理自定义函数因子。</p><p>重载 <code>equals</code> 方法判断表达式是否相等，重载 <code>toString</code> 方法返回字符串。</p><p><strong>具体的类图如下：</strong></p><p><img src="https://s2.loli.net/2023/03/18/1OacMNhywF6eZCH.png" alt="image-20230318103340317"></p><p>对于新增的类和方法：</p><ul><li>Trigon：三角函数因子</li><li>CusFunction：自变量函数</li><li>CusFuncProcess：自变量函数集合</li></ul><h3 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h3><p>在第一次作业的基础上迭代，主要考虑以下问题：</p><ol><li><p>括号嵌套处理</p><p>修改了计算化简部分的方法，处理上应该不会有太大问题。</p></li><li><p>三角函数处理</p><p>在语法分析时，三角函数因子的处理方式和其他因子相似。</p><p>在计算化简时，由于其独特的属性会带来一些不同，会在“性能优化”部分详细描述。</p></li><li><p>自定义函数调用</p><p>考虑到方法撰写的难度和时间、空间上的消耗，对于读入的自定义函数，先进行预处理：①对自定义函数用语法树分析一遍，再转为字符串；②将自定义函数中的形参按顺序用例如 <code>u</code> , <code>v</code> , <code>w</code> 等未出现的字母 <code>replaceAll</code> （原因请读者自己思考）。</p><p>当在所求的表达式中遇到自定义函数，将实参代入后再分析即可。这里值得注意的一点是<strong>在所求表达式中遇到形如</strong> $f(A, B, C)$ <strong>，如何取出实参</strong>？有多种做法，我采用的是用 <code>Parser</code> 取出实参 <code>exprA</code> , <code>exprB</code> , <code>exprC</code> ，再转化为字符串，代入自定义函数字符串。那么此时我们又会遇到一个问题：若 </p><script type="math/tex; mode=display">1</script><script type="math/tex; mode=display">f(x)=x*sin(x)</script><script type="math/tex; mode=display">f(y+sin(x))</script><p>如果按上述方法，我们会得到 $y+sin(x)/<em>/</em>2$ ，显然是有问题的。此时我们可以采用 <code>&quot;(&quot; + expr.toString() + &quot;)&quot;</code> 代入自定义函数字符串。 </p></li></ol><h3 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h3><p>我们注意到最终表达式的每一项形如 A*x**B*y**C*z**D*[sin(expr)**E][cos(expr)**F]$ ( $[]$ 表示这一项可以省略)。</p><ul><li>在 <code>multSimplify</code> 中，把每一项都化简成上述形式，其中三角函数的合并同类项需要判断 <code>expr</code> 是否相等（重载equals），如果相等指数相加（新开一个 <code>Trigon</code> 保存！！！）。</li><li>在 <code>addSimplify</code> 中，判断项与项是否相同（此处相同指除了系数 $A$ 外均相同），相同则 $A=A_1+A_2$ ， 其余不变。</li><li>$sin(0)=0, cos(0)=1$</li><li>$sin(-A)=-A, cos(-A)=A$</li><li>三角函数<strong>对应的嵌套因子</strong>为<strong>不带指数的表达式因子</strong>时，该表达式因子两侧必要的一层括号；否则可省略。</li><li>表达式尽量保证首项是正的。</li></ul><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><div class="table-container"><table><thead><tr><th>CusFuncProcess.CusFuncProcess(ArrayList)</th><th>3.0</th><th>1.0</th><th>3.0</th><th>3.0</th></tr></thead><tbody><tr><td>CusFuncProcess.getExpr(char, ArrayList, CusFuncProcess)</td><td>3.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>CusFunction.CusFunction(String)</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>CusFunction.getExprString(ArrayList)</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>CusFunction.getFuncName()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.add()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.addExpr(Expr)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.addSimply()</td><td>8.0</td><td>1.0</td><td>5.0</td><td>5.0</td></tr><tr><td>Expr.addTerm(Term)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.changeNegative()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.equals(Object)</td><td>16.0</td><td>6.0</td><td>5.0</td><td>8.0</td></tr><tr><td>Expr.Expr()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.getTerms()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.isNegative()</td><td>3.0</td><td>3.0</td><td>2.0</td><td>3.0</td></tr><tr><td>Expr.isPower()</td><td>19.0</td><td>7.0</td><td>6.0</td><td>11.0</td></tr><tr><td>Expr.toString()</td><td>8.0</td><td>1.0</td><td>7.0</td><td>7.0</td></tr><tr><td>ExprPow.ExprPow(Expr, Integer)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.getBaseExpr()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.getNumber()</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Lexer.getPos()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.Lexer(String)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.next()</td><td>11.0</td><td>2.0</td><td>9.0</td><td>10.0</td></tr><tr><td>Lexer.peek()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>MainClass.initString(String)</td><td>18.0</td><td>3.0</td><td>11.0</td><td>12.0</td></tr><tr><td>MainClass.main(String[])</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Number.addNum(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.equals(Object)</td><td>5.0</td><td>4.0</td><td>3.0</td><td>4.0</td></tr><tr><td>Number.getNum()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.Number(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.setNum(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.cusfunctionFactor()</td><td>6.0</td><td>3.0</td><td>4.0</td><td>5.0</td></tr><tr><td>Parse.exprFactor()</td><td>5.0</td><td>3.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Parse.numberFactor()</td><td>11.0</td><td>1.0</td><td>8.0</td><td>8.0</td></tr><tr><td>Parse.Parse(Lexer)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.parseExpr()</td><td>7.0</td><td>1.0</td><td>7.0</td><td>7.0</td></tr><tr><td>Parse.parseFactor()</td><td>8.0</td><td>1.0</td><td>10.0</td><td>10.0</td></tr><tr><td>Parse.parseTerm()</td><td>11.0</td><td>1.0</td><td>6.0</td><td>6.0</td></tr><tr><td>Parse.powerFactor()</td><td>24.0</td><td>9.0</td><td>6.0</td><td>9.0</td></tr><tr><td>Parse.setCusFuncProcess(ArrayList)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.setCusFuncProcess(CusFuncProcess)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.trigonFactor()</td><td>19.0</td><td>7.0</td><td>7.0</td><td>9.0</td></tr><tr><td>Power.equals(Object)</td><td>6.0</td><td>4.0</td><td>4.0</td><td>5.0</td></tr><tr><td>Power.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.getType()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.Power(int, int)</td><td>3.0</td><td>1.0</td><td>1.0</td><td>3.0</td></tr><tr><td>Power.toString()</td><td>3.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Term.addFactor(Factor)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.addTerm(Term)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.canAddsimply(Term)</td><td>14.0</td><td>7.0</td><td>3.0</td><td>8.0</td></tr><tr><td>Term.equals(Object)</td><td>16.0</td><td>6.0</td><td>5.0</td><td>8.0</td></tr><tr><td>Term.getFactors()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.multiply()</td><td>30.0</td><td>1.0</td><td>10.0</td><td>10.0</td></tr><tr><td>Term.multSimply()</td><td>22.0</td><td>1.0</td><td>11.0</td><td>11.0</td></tr><tr><td>Term.Term()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.toString()</td><td>40.0</td><td>6.0</td><td>15.0</td><td>17.0</td></tr><tr><td>Trigon.addExponent(int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.clonee()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.equals(Object)</td><td>6.0</td><td>4.0</td><td>5.0</td><td>6.0</td></tr><tr><td>Trigon.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.getExprFactor()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.getisSin()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.toString()</td><td>8.0</td><td>1.0</td><td>5.0</td><td>8.0</td></tr><tr><td>Trigon.Trigon(Expr, boolean, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Total</td><td>342.0</td><td>123.0</td><td>212.0</td><td>247.0</td></tr><tr><td>Average</td><td>5.34375</td><td>1.921875</td><td>3.3125</td><td>3.859375</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>ExprPow</th><th>1.0</th><th>1.0</th><th>3.0</th></tr></thead><tbody><tr><td>Number</td><td>1.6</td><td>4.0</td><td>8.0</td></tr><tr><td>Trigon</td><td>2.25</td><td>8.0</td><td>18.0</td></tr><tr><td>CusFunction</td><td>2.3333333333333335</td><td>3.0</td><td>7.0</td></tr><tr><td>Lexer</td><td>2.4</td><td>7.0</td><td>12.0</td></tr><tr><td>Power</td><td>2.4</td><td>4.0</td><td>12.0</td></tr><tr><td>CusFuncProcess</td><td>3.0</td><td>3.0</td><td>6.0</td></tr><tr><td>Expr</td><td>3.6363636363636362</td><td>10.0</td><td>40.0</td></tr><tr><td>Parse</td><td>4.636363636363637</td><td>9.0</td><td>51.0</td></tr><tr><td>MainClass</td><td>6.0</td><td>10.0</td><td>12.0</td></tr><tr><td>Term</td><td>6.222222222222222</td><td>16.0</td><td>56.0</td></tr><tr><td>Total</td><td></td><td></td><td>225.0</td></tr><tr><td>Average</td><td>3.515625</td><td>6.818181818181818</td><td>20.454545454545453</td></tr></tbody></table></div><p>由于先完成作业基本要求，再思考性能优化，以及 <code>ArrayList</code> 的局限性，优化函数写的比较冗余；Expr，Term等类聚集了比较多的功能。</p><h3 id="bug-分析-1"><a href="#bug-分析-1" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>在评测时，遇到一个bug是因为在合并同类项时没有进行深拷贝，直接在原项上加减，导致对该项出现在的其他位置产生了影响。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>对于第二次作业，我在第一次作业的基础上进行了大幅度的修改，仅保留了第一次作业的语法分析。并且感觉本次作业写的比较冗余，可能不利于第三次迭代。个人建议是在写之前，列清楚每个类、属性、方法的用处，调用关系等，而不是边写边扩充（其实我的代码里有些都是可以合并的）。</p><h2 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h2><h3 id="题目简述-2"><a href="#题目简述-2" class="headerlink" title="题目简述"></a>题目简述</h3><blockquote><p>读入<strong>一系列自定义函数的定义</strong>以及一个包含幂函数、三角函数、自定义函数调用、求导算子的<strong>表达式</strong>，输出<strong>恒等变形展开所有括号后</strong>的表达式。</p></blockquote><h3 id="整体架构-2"><a href="#整体架构-2" class="headerlink" title="整体架构"></a>整体架构</h3><h4 id="迭代内容-1"><a href="#迭代内容-1" class="headerlink" title="迭代内容"></a>迭代内容</h4><ul><li>加入<strong>求导算子</strong>，解决方法是在每个表达式模型的类中加入 <code>differentiate</code> 方法。</li><li>自定义函数表达式<strong>支持调用其他已已定义的函数</strong>，由于在第二次作业中我对自定义函数的处理是先对其语法分析，将结果存为字符串，再传给表达式语法分析的 <code>Parse</code> 类，进行自变量替换，已经支持该功能，几乎不需要做改动。</li></ul><p><strong>具体的类图如下：</strong></p><p><img src="https://s2.loli.net/2023/03/18/VNbO7CdU2ac1ZxG.png" alt="image-20230318105523253"></p><p>与第二次作业对比，仅在 <code>Expr</code>, <code>Term</code>, <code>Trigon</code> 类里加了求导方法。</p><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><div class="table-container"><table><thead><tr><th>CusFuncProcess.addCusFuncProcess(String)</th><th>0.0</th><th>1.0</th><th>1.0</th><th>1.0</th></tr></thead><tbody><tr><td>CusFuncProcess.getExpr(char, ArrayList, CusFuncProcess)</td><td>3.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>CusFunction.CusFunction(String, CusFuncProcess)</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>CusFunction.getExprString(ArrayList)</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>CusFunction.getFuncName()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.add()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.addAllTerms(Expr)</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.addSimplify()</td><td>12.0</td><td>1.0</td><td>6.0</td><td>6.0</td></tr><tr><td>Expr.addTerm(Term)</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.changeNegative()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.clone()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Expr.differentiate(String)</td><td>4.0</td><td>2.0</td><td>3.0</td><td>4.0</td></tr><tr><td>Expr.diffIsZero(String)</td><td>1.0</td><td>2.0</td><td>1.0</td><td>2.0</td></tr><tr><td>Expr.equals(Object)</td><td>16.0</td><td>6.0</td><td>5.0</td><td>8.0</td></tr><tr><td>Expr.Expr()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.getTerms()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Expr.isNegative()</td><td>3.0</td><td>3.0</td><td>2.0</td><td>3.0</td></tr><tr><td>Expr.isPower()</td><td>16.0</td><td>7.0</td><td>6.0</td><td>11.0</td></tr><tr><td>Expr.toString()</td><td>8.0</td><td>1.0</td><td>7.0</td><td>7.0</td></tr><tr><td>ExprPow.clone()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.ExprPow(Expr, Integer)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.getBaseExpr()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>ExprPow.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.getNumber()</td><td>2.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Lexer.getPos()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.Lexer(String)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Lexer.next()</td><td>11.0</td><td>2.0</td><td>9.0</td><td>10.0</td></tr><tr><td>Lexer.peek()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>MainClass.initString(String)</td><td>18.0</td><td>3.0</td><td>11.0</td><td>12.0</td></tr><tr><td>MainClass.main(String[])</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Number.addNum(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.clone()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.equals(Object)</td><td>5.0</td><td>4.0</td><td>3.0</td><td>4.0</td></tr><tr><td>Number.getNum()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.Number(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Number.setNum(BigInteger)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.cusfunctionFactor()</td><td>6.0</td><td>3.0</td><td>4.0</td><td>5.0</td></tr><tr><td>Parse.derivativeFactor()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Parse.exprFactor()</td><td>5.0</td><td>3.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Parse.numberFactor()</td><td>11.0</td><td>1.0</td><td>8.0</td><td>8.0</td></tr><tr><td>Parse.Parse(Lexer)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.parseExpr()</td><td>7.0</td><td>1.0</td><td>7.0</td><td>7.0</td></tr><tr><td>Parse.parseFactor()</td><td>9.0</td><td>1.0</td><td>11.0</td><td>11.0</td></tr><tr><td>Parse.parseTerm()</td><td>11.0</td><td>1.0</td><td>6.0</td><td>6.0</td></tr><tr><td>Parse.powerFactor()</td><td>24.0</td><td>9.0</td><td>6.0</td><td>9.0</td></tr><tr><td>Parse.setCusFuncProcess(CusFuncProcess)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Parse.trigonFactor()</td><td>19.0</td><td>7.0</td><td>7.0</td><td>9.0</td></tr><tr><td>Power.clone()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.equals(Object)</td><td>6.0</td><td>4.0</td><td>4.0</td><td>5.0</td></tr><tr><td>Power.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.getType()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.Power(String, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Power.toString()</td><td>3.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Term.addAllFactors(Term)</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Term.addFactor(Factor)</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Term.canAddSimplify(Term)</td><td>14.0</td><td>7.0</td><td>3.0</td><td>8.0</td></tr><tr><td>Term.clone()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td>Term.differentiate(String)</td><td>30.0</td><td>11.0</td><td>9.0</td><td>14.0</td></tr><tr><td>Term.equals(Object)</td><td>16.0</td><td>6.0</td><td>5.0</td><td>8.0</td></tr><tr><td>Term.getFactors()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.multiply()</td><td>34.0</td><td>1.0</td><td>11.0</td><td>11.0</td></tr><tr><td>Term.multSimplify()</td><td>23.0</td><td>2.0</td><td>11.0</td><td>12.0</td></tr><tr><td>Term.Term()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Term.toString()</td><td>40.0</td><td>6.0</td><td>14.0</td><td>16.0</td></tr><tr><td>Trigon.clone()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.differentiate(String)</td><td>3.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td>Trigon.equals(Object)</td><td>6.0</td><td>4.0</td><td>5.0</td><td>6.0</td></tr><tr><td>Trigon.getExponent()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.getExprFactor()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.getisSin()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Trigon.toString()</td><td>8.0</td><td>1.0</td><td>5.0</td><td>8.0</td></tr><tr><td>Trigon.Trigon(Expr, boolean, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td>Total</td><td>388.0</td><td>144.0</td><td>239.0</td><td>280.0</td></tr><tr><td>Average</td><td>5.388888888888889</td><td>2.0</td><td>3.3194444444444446</td><td>3.888888888888889</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>ExprPow</th><th>1.0</th><th>1.0</th><th>4.0</th></tr></thead><tbody><tr><td>Number</td><td>1.5</td><td>4.0</td><td>9.0</td></tr><tr><td>Power</td><td>1.8333333333333333</td><td>4.0</td><td>11.0</td></tr><tr><td>CusFuncProcess</td><td>2.0</td><td>3.0</td><td>4.0</td></tr><tr><td>CusFunction</td><td>2.3333333333333335</td><td>3.0</td><td>7.0</td></tr><tr><td>Lexer</td><td>2.4</td><td>7.0</td><td>12.0</td></tr><tr><td>Trigon</td><td>2.5</td><td>8.0</td><td>20.0</td></tr><tr><td>Expr</td><td>3.642857142857143</td><td>10.0</td><td>51.0</td></tr><tr><td>Parse</td><td>4.818181818181818</td><td>9.0</td><td>53.0</td></tr><tr><td>MainClass</td><td>6.0</td><td>10.0</td><td>12.0</td></tr><tr><td>Term</td><td>6.818181818181818</td><td>15.0</td><td>75.0</td></tr><tr><td>Total</td><td></td><td></td><td>258.0</td></tr><tr><td>Average</td><td>3.5833333333333335</td><td>6.7272727272727275</td><td>23.454545454545453</td></tr></tbody></table></div><p>这次的一些类复杂度高的原因其实和上次作业相同，因为担心改了出问题，所以并没有改动架构。</p><h3 id="bug-分析-2"><a href="#bug-分析-2" class="headerlink" title="bug 分析"></a>bug 分析</h3><p>本次作业遇到的bug是求导时，如果因子不含有求导变量，会返回null，然后出现了 $-dx(2) = 1$。在提交强测前已自检出。</p><h2 id="第一单元作业总结"><a href="#第一单元作业总结" class="headerlink" title="第一单元作业总结"></a>第一单元作业总结</h2><p>本单元作业结果上是ok的，但是架构上不太合适，比如可扩展性不太好，一些类复杂度比较高，一些可以复合的地方写的比较冗余。在以后的作业中，我觉得需要提前为下一次迭代预留空间，先思考好每个要求由哪些类实现，每个类实现哪些功能，减少类与类之间的耦合度。</p><p><em>如果发现写的有误或有更好的做法，欢迎到评论区指正或分享</em> (*^▽^*)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Object Oriented </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux虚拟机联不上网解决方法</title>
      <link href="/2023/02/28/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%81%94%E4%B8%8D%E4%B8%8A%E7%BD%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/28/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%81%94%E4%B8%8D%E4%B8%8A%E7%BD%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><em>在用docker下cellift的时候校园网时不时地会崩掉，后来把校园网连回去，虚拟机也没有网，搞了半天才连回去，故在此想记录一下过程。</em></p><h2 id="Centos命令行上下翻页"><a href="#Centos命令行上下翻页" class="headerlink" title="Centos命令行上下翻页"></a>Centos命令行上下翻页</h2><p><em>写博客的时候本来想翻一下刚刚的操作记录，结果发现不会翻页，进行了一番搜索和咨询大佬。</em></p><p>​        由于笔记本键盘中<code>PgUp</code> 和 <code>↑</code> 键合并在一起，所以不能直接用 <code>shift</code> + <code>PgUp</code>，而应该用 <code>shift</code> + <code>Fn</code> +  <code>PgUp</code> 。</p><h2 id="Linux虚拟机网络连接"><a href="#Linux虚拟机网络连接" class="headerlink" title="Linux虚拟机网络连接"></a>Linux虚拟机网络连接</h2><p><em>以下基于NAT网络连接模式（虚拟机 -&gt; 网络适配器 -&gt; 网络连接NAT模式）</em></p><h3 id="查看网络连接是否正常"><a href="#查看网络连接是否正常" class="headerlink" title="查看网络连接是否正常"></a>查看网络连接是否正常</h3><h4 id="查看本机与虚拟机是否连接正常"><a href="#查看本机与虚拟机是否连接正常" class="headerlink" title="查看本机与虚拟机是否连接正常"></a>查看本机与虚拟机是否连接正常</h4><h5 id="本机ping虚拟机"><a href="#本机ping虚拟机" class="headerlink" title="本机ping虚拟机"></a>本机ping虚拟机</h5><p><img src="https://s2.loli.net/2023/02/28/xXiBF67orkazPJT.png" alt=""></p><h5 id="虚拟机ping本机"><a href="#虚拟机ping本机" class="headerlink" title="虚拟机ping本机"></a>虚拟机ping本机</h5><p>​         在本机中打开 cmd ，输入 <code>ipconfig</code> 查看ip设置</p><p><img src="https://s2.loli.net/2023/02/28/NkWh3ay7gKEFXw1.png" alt="image-20230228132503621"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 10.193.4.233</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/28/2XWbu4znayOEQT6.png" alt="image-20230228132838410"></p><p>​        以上表示本机与虚拟机连接正常</p><pre><code>#### 2.2.2 虚拟机与远程网络连接</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/28/iRYOpFUJIzm7XAb.png" alt="image-20230228133154328"></p><h3 id="解决网络连接失败方法"><a href="#解决网络连接失败方法" class="headerlink" title="解决网络连接失败方法"></a>解决网络连接失败方法</h3><p>如果 <code>ping www.baidu.com: 未知的名称或服务</code>，说明网络连接有问题。</p><h4 id="检查网络配置文件"><a href="#检查网络配置文件" class="headerlink" title="检查网络配置文件"></a>检查网络配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/28/zpA3j96f5qxkmJc.png" alt="image-20230228134612519"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ONBOOT=&quot;yes&quot; #设置开机启动网络</span><br><span class="line">BOOTPROTO=&quot;static&quot; #设置静态IP，这样IP地址不会随着物理机IP地址的改变而改变</span><br><span class="line">IPADDR=192.168.33.123 #IP地址，前3位和GATEWAY一致</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br><span class="line">GATEWAY=192.168.33.2 #设置网关，在虚拟网络编辑器中查看</span><br><span class="line">DNS=8.8.8.8</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/28/AUQHsRIvE2axXr4.png" alt="image-20230228134944158"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart #重启网卡</span><br></pre></td></tr></table></figure><p>此时可能出现以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Job for network.service failed because the control process exited with error code. </span><br><span class="line">See &quot;systemctl status network.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure><p>该问题可以参考<a href="https://blog.csdn.net/u012904764/article/details/95883192">https://blog.csdn.net/u012904764/article/details/95883192</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解决方法</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止networkmanager服务</span></span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启网卡</span></span><br><span class="line">systemctl restart network</span><br><span class="line">systemctl status network</span><br></pre></td></tr></table></figure><h4 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/02/28/urGMtj9l67Hzwgn.png" alt="image-20230228141227466"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加DNS</span><br><span class="line">nameserver 8.8.8.8 #google的DNS</span><br></pre></td></tr></table></figure><p>最后再按照2.1步骤检查一遍，可以联网。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>我想把网络设置从NAT模式改为桥接模式，个人感觉是进行了一些正常操作，但是重启后右上角网络的角标失踪，网络无法连接，按上述操作完全行不通。于是，我参考了<a href="https://blog.csdn.net/m0_52709408/article/details/127527890?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-127527890-blog-125765055.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-127527890-blog-125765055.pc_relevant_default&amp;utm_relevant_index=1">这个方法 </a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nmcli networking off</span><br><span class="line">sudo nmcli networking on</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_44791658/article/details/119486115?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ubuntu22.04%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-119486115.142^v73^control,201^v4^add_ask,239^v2^insert_chatgpt&amp;spm=1018.2226.3001.4187">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客使用操作记录</title>
      <link href="/2023/02/28/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/02/28/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>进入博客所在目录，右键点击 <code>Git Bash Here</code> ，创建博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;博客使用操作记录&quot;</span><br></pre></td></tr></table></figure><p>然后可以在source/_posts内查看新创建的 <code>.md</code>文件，在其中编写即可。</p><p>在 <code>front-matter</code> 内添加 <code>title</code>，<code>date</code>，<code>tags</code>，<code>description</code>，<code>cover</code>等描述文字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">编辑完成文章后，在git中输入</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>在博客所在仓库目录下新建 <code>CNAME</code> 文件，输入域名（如果自定义域名的话）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.cajzella.cn</span><br></pre></td></tr></table></figure><h2 id="ssh-连接-Github"><a href="#ssh-连接-Github" class="headerlink" title="ssh 连接 Github"></a>ssh 连接 Github</h2><p>当 Github中添加本地ssh公钥后，在 git 中输入 <code>ssh -T git@github.io</code> ，发现以下报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kex_exchange_identification: Connection closed by remote host</span><br><span class="line">ssh:connect to host github.com port 22: Connection timed out</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong></p><ul><li>修改 known_hosts，删除known_hosts.old。（原理参考<a href="https://cloud.tencent.com/developer/article/1946906）">https://cloud.tencent.com/developer/article/1946906）</a></li><li>删除博客目录下原有的 <code>.deploy_git</code> 和 <code>public</code> 文件。</li><li>后者报错<a href="https://blog.csdn.net/yjxkq99/article/details/128927038#:~:text=ssh%3Aconnect%20to%20host%20github.com%20port%2022%3A,Connection%20timed%20out%20%E9%80%9A%E8%BF%87%E6%9F%A5%E9%98%85%E5%90%84%E7%A7%8D%E8%B5%84%E6%96%99%EF%BC%8C%E5%BE%97%E7%9F%A5%E5%8E%9F%E5%9B%A0%E5%8F%AF%E8%83%BD%E6%98%AF%E7%94%B1%E4%BA%8E%E7%94%B5%E8%84%91%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96%E7%BD%91%E7%BB%9C%E5%8E%9F%E5%9B%A0%E5%AF%BC%E8%87%B4%20ssh%E8%BF%9E%E6%8E%A5%20%E6%96%B9%E5%BC%8F%20%E7%AB%AF%E5%8F%A322%E8%A2%AB%E5%B0%81%E9%94%81%E3%80%82">参考</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CO实验总结</title>
      <link href="/2022/12/31/CO%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
      <url>/2022/12/31/CO%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><em>这是 CajZella 的学期末的 CO上机回忆录~</em></p><p>​        计算机组成原理课程分为理论课和实验课部分。理论课以<strong>MIPS系统</strong>为主要学习对象，讲述计算机硬件系统的组成、各部件的结构及其底层硬件的工作原理。实验课要求自主开发一台以MIPS处理器为核心的功能型计算机。</p><p>​        看到此，读者不必担忧。实验课是比较循序渐进的。在大二上学期开学前的两周左右，课程组会开放<a href="http://cscore.buaa.edu.cn/">实验教程</a>（<a href="https://vpn.buaa.edu.cn/portal/?redirect_uri=https%3A%2F%2Fcscore-buaa-edu-cn.vpn.buaa.edu.cn%3A8118%2F#!/login">VPN登录方式</a>）以供同学预习。在这期间，读者可以熟悉 <code>Logisim</code> ,  <code>Verilog</code>, <code>MIPS</code> 的环境及编写，完成实验教程对应的例题。当然如果暑假没有预习也不必担心，笔者同样在暑假没有学习相关内容，只是配置了<code>Logisim</code> , <code>ISE</code> , <code>Mars</code>等软件，在开学后会有四周预习时间（2021级），内容即为暑假开放的<code>Pre</code>。在第五周会迎来第一次上机 <code>Pre</code> , 时长为 $2.5h$ , <code>Logisim</code> ,  <code>Verilog</code>, <code>MIPS</code> 各一题，印象中对笔者来说比较难，当时未通过，不过本次上机不通过不会gap一周。接下来会是几乎每周各一次的上机：</p><ul><li><code>P0</code> , <code>P1</code> , <code>P2</code> 分别为  <code>Logisim</code> ,  <code>Verilog</code>, <code>MIPS</code> , 题型和 <code>Pre</code> 差不多；</li><li><code>P3</code> , <code>P4</code> 分别是 <code>Logisim</code> ，<code>Verilog</code> 开发MIPS单周期处理器（<code>P3</code> 开始进入正题）;</li><li><code>P5</code> 是 <code>Verilog</code> 开发单周期流水线CPU （<code>P5</code> 开始不会涉及 <code>Logisim</code>）;</li><li><code>P6</code> 在 <code>P5</code> 的基础上，扩展了乘除指令，需要<strong>模拟乘除模块的执行</strong>；</li><li><code>p7</code> 在 <code>P6</code> 的基础上，实现一个简单的计算机系统——MIPS微系统，需要处理<strong>内部溢出和外部中断</strong>，<strong>与外设交互</strong>；</li><li><code>P8</code> 要求在FPAG上实现系统验证，需要替换不可综合的部分，添加 <code>GPIO</code> , <code>DigitalTube</code> , <code>UART</code> 外设，编写软件实现一些功能。</li></ul><p>​        笔者认为CO实验是在涅槃中浴火重生的一场考验，作为进入计算机专业后的第一门专业课，注定是不平凡的。如果缺乏相应知识，仅仅阅读实验教程是难以顺利完成上机的，笔者认为还可借助以下资源：</p><ul><li>理论课的PPT和《数字设计和计算机体系结构》等教科书，对 <code>P3</code> 开始的CPU搭建会有一定帮助。</li><li>学长学姐们的博客和 github repo，会有历届学长学姐们的学习体会、测试数据、注意事项和课上回忆（注意每年题目可能会有变化）。</li><li>请教助教，助教们都非常亲切耐心，遇到问题百思不得其解的时候不要犹豫(＾Ｕ＾)ノ~ＹＯ </li><li>同学间的帮助，尤其是<code>P5</code>开始的流水线CPU，需要自己构造测试数据debug，可能遇到一些隐蔽性极好的bug，集思广益或许可以加快进度 O(∩_∩)O 。祝读者课上不会遇到课下的bug哇~</li></ul><p>​        “<strong>于高山之巅，方见大河奔涌；于群峰之上，更觉长风浩荡。</strong>” 这是一门由千千万万BUAA学子实践过的课程，其价值不断被凝练，祝你从中有所收获，更深入理解计算机组成原理。</p><p>​        21级老学姐就在此祝大家一路通关啦ヾ(✿ﾟ▽ﾟ)ノ </p>]]></content>
      
      
      
        <tags>
            
            <tag> CO实验 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
